{"componentChunkName":"component---src-templates-blog-post-js","path":"/test-driven-algorithms/sorting/","result":{"data":{"site":{"siteMetadata":{"title":"Alabê's Blog"}},"markdownRemark":{"id":"6b424d30-eba8-514d-80a4-7dc9ebf58f33","excerpt":"Sorting algorithms are heavily used in Software Development in one way or\nanother. Depending on the language, you might have in handy some sorting\nfunctions at…","html":"<p>Sorting algorithms are heavily used in Software Development in one way or\nanother. Depending on the language, you might have in handy some sorting\nfunctions at your disposal but depending on the use case, knowing which sorting\nalgorithm is being applied under the hood can be key to measure the impacts of\nthe change on the working Software.</p>\n<p>In this article, I’d like to explore a couple of implementations of sorting\nalgorithms but I’d like to do so driven by unit tests. I haven’t seen much\ncontent online that explore this approach so I hope this sparks your interest.</p>\n<h2>A recap on what Sorting Algorithms are</h2>\n<p>Most of the sorting algorithms definitions I’ll be using were extracted from the\n<a href=\"https://en.wikipedia.org/wiki/Sorting_algorithm\">Wikipedia</a> so here’s a summary\nto kick us off:</p>\n<blockquote>\n<p>A sorting algorithm is an algorithm that puts elements of a list in a certain\norder.</p>\n</blockquote>\n<p><em>borrowed from Wikipedia</em></p>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 78.33333333333333%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <iframe src=\"https://giphy.com/embed/ezjd4NlY4w3io\" frameborder=\"0\" class=\"giphy-embed\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"> <p><a href=\"https://giphy.com/gifs/algorithm-ezjd4NlY4w3io\">via GIPHY</a></p></iframe> </div>\n<h2>How we will approach this</h2>\n<p>The idea here is to implement one or two sorting algorithms but doing so driven\nby tests. Basically, we’ll write a single test first, with a simple scenario\nwith input and expected output. This will fail because there won’t be any\ncode just yet. Then we will write the minimum necessary code to satisfy the\ntest and repeat the process. The name of this technique is Test-Driven\nDevelopment (TDD). If you’re curious about this process or if it doesn’t sound\nfamiliar to you, please visit <a href=\"/tdd\">this post</a>.</p>\n<p>The language I’ll use will be <a href=\"https://golang.org/\">Go</a> and using a single file\nwith <strong>both test and implementation</strong> for simplicity.</p>\n<p>If you are not familiar with the Go language, don’t worry. I will post different\nsnippets of code to illustrate every step as we were scrolling up and down in a\nfile. The idea here is to explore the technique, not the syntax or peculiarities\nof Go.</p>\n<p>You might notice that I’ll be using the term\n<a href=\"https://en.wikipedia.org/wiki/Array_data_structure\">Array</a> although in Go there\nis a difference between <a href=\"https://blog.golang.org/slices-intro\">Arrays and\nSlices</a> and, technically, I’ll be using\nSlices during the code.</p>\n<p>I’ll also try to describe each step, so pretend we’re doing some <a href=\"https://martinfowler.com/articles/on-pair-programming.html\">Pair\nProgramming</a></p>\n<h2>Let’s kick it off</h2>\n<p>All right. As I mentioned below, I’d like to start with a simple test that would\nforce me to add the least amount of code just to get things working, then we can\nadd more to it. In terms of which algorithm I intend to chose, I’ll go with\n<a href=\"https://en.wikipedia.org/wiki/Bubble_sort\">Bubble sort</a>. Then we evaluate if\nthis is good enough for us, if not, we refactor our code to choose a different\nimplementation. The important thing here is: at the end, regardless of the\nalgorithm we choose, the tests need to pass as we’ll still want to sort our\nelements.</p>\n<p><em>Also, for simplicity, our sorting algorithm will only be going to handle numbers\n(integers to be more precise).</em></p>\n<p>Let’s start with the simplest input possible, which would be an empty array. Why?\nBecause if we want to sort an empty array, the result should be an empty array!\nThe approach I’d like to follow is to get things going with <strong>minimal moves as\npossible</strong> because we need constant feedback. We could start with an array with\n4 elements and write a test which would expect this array to be sorted, but this\nwould require us spending more time writing code, less time writing test. I’d\nlike to get some balance and make sure we don’t leave any edge case behind.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> sorting_test\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"testing\"</span>\n\n\t<span class=\"token string\">\"github.com/matryer/is\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestSort</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return same value when array is empty\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tis <span class=\"token operator\">:=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\t\telements <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\texpected <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Running the test above with <code class=\"language-text\">go test</code>, it will fail:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go test ./.\n2021/06/08 14:06:17 exit status 2\n# alabeduarte.com_test [alabeduarte.com.test]\n./sorting_test.go:15:12: undefined: Sort\nFAIL    alabeduarte.com [build failed]\nFAIL\nFAIL (0.22 seconds)</code></pre></div>\n<p>This is because <code class=\"language-text\">Sort</code> method is not defined anywhere. Let’s make the\nminimal effort to get this passing than by defining the method and make it\nreturn an empty array so our test will pass!</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Implementation file</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>_elements <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Note that we’re always returning an empty array, no matter what</em></p>\n<p>Running the tests:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go test ./.\nok      alabeduarte.com 0.940s\nPASS (0.39 seconds)</code></pre></div>\n<p>Now let’s add another test scenario where it will force us to write something\nother than hardcoded response:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Test file</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestSort</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// previous test scenario is omitted here ...</span>\n\n  t<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return same value when array has only one element\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    is <span class=\"token operator\">:=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n    elements <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n    expected <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n\n    is<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go test ./.\n2021/06/08 14:04:49 exit status 1\n        sorting_test.go:29: [] != [1]\n--- FAIL: TestSort (0.00s)\n    --- FAIL: TestSort/should_return_same_value_when_array_has_only_one_element (0.00s)\nFAIL\nFAIL    alabeduarte.com 0.101s\nFAIL\nFAIL (0.31 seconds)</code></pre></div>\n<p>This is expected since our implementation code is always returning an empty\narray. Let’s change that and make the test pass, but in a way that would require\nthe minimal effort possible to achieve that:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Implementation file</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>elements <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">return</span> elements\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><em>Note that returning the elements themselves satisfies both scenarios we have so far</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go test ./.\nok      alabeduarte.com 0.766s\nPASS (0.39 seconds)</code></pre></div>\n<p>Now that our two scenarios are passing, let’s evaluate our code so far…</p>\n<p>Ok, looking at the code, there’s no much I can think of to improve, except for\nthe fact that our tests are a bit verbose at the moment. We’re defining\nvariables <code class=\"language-text\">elements</code> and <code class=\"language-text\">expected</code> in our tests, then we’re doing the following\nevaluation:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">is<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> expected<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Considering how simple our test is at the moment, I feel we could do things\ninline, so let’s refactor it:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Test file</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestSort</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return same value when array is empty\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tis <span class=\"token operator\">:=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\n\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return same value when array has only one element\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tis <span class=\"token operator\">:=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\n\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, running the tests, they still should be passing, since we didn’t add\nanything new:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go test ./.\nok      alabeduarte.com (cached)\nPASS (0.24 seconds)</code></pre></div>\n<p>Good. Now everything is “green” (a.k.a passing), let’s add a new scenario that\nwould actually require us to apply any sort of algorithm. However, let’s add\nsomething really simple, like 2 numbers:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Test file</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestSort</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return the lowest element followed by the largest element\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tis <span class=\"token operator\">:=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\n\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As expected, the test should fail:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go test ./.\n2021/06/08 14:21:11 exit status 1\n        sorting_test.go:31: [2 1] != [1 2]\n--- FAIL: TestSort (0.00s)\n    --- FAIL: TestSort/should_return_the_lowest_element_followed_by_the_largest_element (0.00s)\nFAIL\nFAIL    alabeduarte.com 0.098s\nFAIL\nFAIL (0.34 seconds)</code></pre></div>\n<p>Now, let’s make it pass!</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Implementation file</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>elements <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> elements\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span>elements<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> elements<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go test ./.\nok      alabeduarte.com 0.759s\nPASS (0.37 seconds)</code></pre></div>\n<p>That’s great! The tests are all passing. You might be wondering… our\nimplementation doesn’t sound very reliable isn’t it? A few things can go wrong\nthere… also, it feels like we’re cheating because we’re always grabbing the\nfirst and second element and returning them into the reverse order, there’s no\nsorting going on, to be honest. Let’s break the code down and discuss it further\nwhat we can do next:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Implementation file</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>elements <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// here we are checking if the length is less or equal to 1</span>\n  <span class=\"token comment\">// which means that if the array is empty we will return the elements</span>\n  <span class=\"token comment\">// themselves (an empty array) and if the array has only one element, it will</span>\n  <span class=\"token comment\">// also return itself.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> elements\n\t<span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// On this case, we're grabbing the second elemnt and the first element and</span>\n  <span class=\"token comment\">// swapping the order of the two</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span>elements<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> elements<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Basically, if the array has more than 2 elements, our code will only return the\nfirst two with reverse order. So here are a few things that can go wrong with\nthis algorithm:</p>\n<ul>\n<li>When the elements’ length is greater than 2, our sorting algorithm will ignore\nthe rest, returning an array with fewer elements</li>\n<li>When the elements are already sorted, our sorting algorithm will mess it up by\nswapping the first two elements</li>\n</ul>\n<p>Should we fix them? <strong>Yes, but we should do so only we have tests.</strong></p>\n<blockquote>\n<p>It is pretty clear that our code is doing the wrong thing. But as tempting as\nit might sound, let’s only add a new code into our implementation if we have a\ntest scenario that would <strong>justify</strong> its existence!</p>\n</blockquote>\n<p>So let’s start with the following test scenario:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Test file</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestSort</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return an array with the same length as the one provided as an input\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tis <span class=\"token operator\">:=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\n\t\tsortedElements <span class=\"token operator\">:=</span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\tactualLength <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>sortedElements<span class=\"token punctuation\">)</span>\n\n\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>actualLength<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As expected, the tests will fail:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go test ./.\n2021/06/08 14:40:57 exit status 1\n        sorting_test.go:44: 2 != 4\n--- FAIL: TestSort (0.00s)\n    --- FAIL: TestSort/should_return_an_array_with_the_same_length_as_the_one_provided_as_an_input (0.00s)\nFAIL\nFAIL    alabeduarte.com 0.101s\nFAIL\nFAIL (0.34 seconds)</code></pre></div>\n<p>Now let’s make it pass:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Implementation file</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>elements <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> elements\n\t<span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// take the elements from index 2 onward</span>\n\trest <span class=\"token operator\">:=</span> elements<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n  <span class=\"token comment\">// append the rest to the original array we had</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span>elements<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> elements<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> rest<span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The tests are passing:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go test ./.\nok      alabeduarte.com 0.801s\nPASS (0.47 seconds)</code></pre></div>\n<p>Since we are making sure the array length will always be the same but we’re\nstill compliant with the other test scenarios. However, the implementation now\nis a bit clunky and this is a sign that it is time to actually implement the\nalgorithm!</p>\n<p>Let’s add a scenario that is simple enough to illustrate that we can sort more\nthan 2 elements without having a clunky implementation. So let’s use 3 elements\nthis time:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Test file</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestSort</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should sort all the elements from the lowest to the largest\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tis <span class=\"token operator\">:=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\n\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And it should fail, of course:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go test ./.\n2021/06/08 14:56:24 exit status 1\n        sorting_test.go:51: [3 2 1] != [1 2 3]\n--- FAIL: TestSort (0.00s)\n    --- FAIL: TestSort/should_sort_all_the_elements_from_the_lowest_to_the_largest (0.00s)\nFAIL\nFAIL    alabeduarte.com 0.099s\nFAIL\nFAIL (0.40 seconds)</code></pre></div>\n<p>Now let’s implement some sorting algorithm here. For now, let’s use the\nthe algorithm called <a href=\"https://en.wikipedia.org/wiki/Bubble_sort\">Bubble Sort</a>.</p>\n<p>As stated on Wikipedia, bubble sort is one of the simplest sorting algorithms to\nunderstand and implement, but its efficiency decreases dramatically on larger\nlists. More details <a href=\"https://en.wikipedia.org/wiki/Bubble_sort#Use\">here</a>.</p>\n<p><em>If you want to know more about the implementation of this algorithm in Go, I\nalso suggest this material:\n<a href=\"https://tutorialedge.net/courses/go-algorithms-course/21-bubble-sort-in-go/\">https://tutorialedge.net/courses/go-algorithms-course/21-bubble-sort-in-go/</a></em></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Implementation file</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>elements <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\n\tn <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> elements\n\t<span class=\"token punctuation\">}</span>\n\n\tswapped <span class=\"token operator\">:=</span> <span class=\"token boolean\">true</span>\n\n\t<span class=\"token keyword\">for</span> swapped <span class=\"token punctuation\">{</span>\n\t\tswapped <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n\n\t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> elements<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> elements<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n\t\t\t\telements<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> elements<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> elements<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\t\t\t\tswapped <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> elements\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With the implementation above, all the tests should pass:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go test ./.\nok      alabeduarte.com 0.858s\nPASS (0.51 seconds)</code></pre></div>\n<h2>Efficiency</h2>\n<p>Our algorithm (bubble sort) is not the most efficient out there. The complexity\nof the algorithm is <em>O(n²)</em>, where <em>n</em> is the number of elements being sorted.\nThis means that its efficiency decreases as the number of elements grow. There\nare other options we can use here such as <a href=\"https://en.wikipedia.org/wiki/Insertion_sort\">insertion\nsort</a> or <a href=\"https://en.wikipedia.org/wiki/Selection_sort\">selection\nsort</a> that are considered my\nefficient.</p>\n<p>Without necessarily changing anything, let’s do a benchmark with our current\nalgorithm using <a href=\"https://golang.org/pkg/testing/#hdr-Benchmarks\">Go testing benchmarks</a>.</p>\n<p>First, let’s create a small function (within our test file) to generate random\nelements with a given length:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Test file</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">generateRandomElements</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// initialise a slice with length and capacity of \"n\"</span>\n\telements <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// populate the slice with random elements</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">range</span> elements <span class=\"token punctuation\">{</span>\n\t\telements <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> elements\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now let’s create a function that will iterate over our method Sort taking the\n<code class=\"language-text\">testing.B</code> as a parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Test file</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">benchmarkBubbleSort</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n  elements <span class=\"token operator\">:=</span> <span class=\"token function\">generateRandomElements</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// sort elements</span>\n  <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, let’s create some benchmark functions to test the efficiency of our\ncode:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Test file</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkBubbleSort3</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkBubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkBubbleSort10</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkBubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkBubbleSort20</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkBubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkBubbleSort50</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkBubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkBubbleSort100</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkBubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkBubbleSort1000</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkBubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span>_000<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkBubbleSort100000</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkBubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span>_000<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>When running the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ go test -bench=.</code></pre></div>\n<p>Here’s the result:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go test -bench=.\ngoos: darwin\ngoarch: amd64\npkg: alabeduarte.com\ncpu: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\nBenchmarkBubbleSort3-12                 11577649               101.7 ns/op\nBenchmarkBubbleSort10-12                 2687889               427.9 ns/op\nBenchmarkBubbleSort20-12                  894934              1340 ns/op\nBenchmarkBubbleSort50-12                  205489              6001 ns/op\nBenchmarkBubbleSort100-12                  60349             18323 ns/op\nBenchmarkBubbleSort1000-12                   966           1260727 ns/op\nBenchmarkBubbleSort100000-12                   1        20640230871 ns/op</code></pre></div>\n<p>As you can see, when having 100,000 elements in the array, my machine took\n<code class=\"language-text\">20640230871</code> nanoseconds to perform the sorting, which was equivalent to about\n20 seconds.</p>\n<p>Let’s try the same using the <a href=\"https://golang.org/pkg/sort/\">Go’s standard\nlibrary</a> implementation to sort our elements.\nLet’s create a small function that will generate random elements and call the\nmethod <a href=\"https://golang.org/pkg/sort/#Ints\">Ints</a> from the package\n<a href=\"https://golang.org/pkg/sort\">sort</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">benchmarkGoSort</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\telements <span class=\"token operator\">:=</span> <span class=\"token function\">generateRandomElements</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\">// sort elements</span>\n\t\tsort<span class=\"token punctuation\">.</span><span class=\"token function\">Ints</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now let’s create similar benchmark functions that will compare our <code class=\"language-text\">Sort</code>\nfunctin against <a href=\"https://golang.org/pkg/sort/#Ints\">sort.Ints</a> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkGoSort3</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkGoSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkGoSort10</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkGoSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkGoSort20</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkGoSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkGoSort50</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkGoSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkGoSort100</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkGoSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkGoSort1000</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkGoSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span>_000<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkGoSort100000</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkGoSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span>_000<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now let’s run the benchmark:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go test -bench=.\ngoos: darwin\ngoarch: amd64\npkg: alabeduarte.com\ncpu: Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz\nBenchmarkBubbleSort3-12                 11743804               102.6 ns/op\nBenchmarkBubbleSort10-12                 2891732               441.7 ns/op\nBenchmarkBubbleSort20-12                  935710              1309 ns/op\nBenchmarkBubbleSort50-12                  204036              5818 ns/op\nBenchmarkBubbleSort100-12                  62976             19958 ns/op\nBenchmarkBubbleSort1000-12                   925           1316431 ns/op\nBenchmarkBubbleSort100000-12                   1        19976397622 ns/op\n\nBenchmarkGoSort3-12                      7070913               172.9 ns/op\nBenchmarkGoSort10-12                     1706870               692.7 ns/op\nBenchmarkGoSort20-12                      783583              1652 ns/op\nBenchmarkGoSort50-12                      276848              4444 ns/op\nBenchmarkGoSort100-12                     124602              9288 ns/op\nBenchmarkGoSort1000-12                     10000            118388 ns/op\nBenchmarkGoSort100000-12                      63          18260485 ns/op</code></pre></div>\n<p>As we can see, our algorithm using bubble sort seems a little better until 50\nelements, where go standard library start to shine being way faster than ours.</p>\n<p>Since the go standard library is more efficient, let’s change our implementation\nto use that instead and re-run the tests:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Implementation file</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>elements <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\n\tsort<span class=\"token punctuation\">.</span><span class=\"token function\">Ints</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> elements\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All tests should still be passing:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">go test -v\n=== RUN   TestSort\n=== RUN   TestSort/should_return_same_value_when_array_is_empty\n=== RUN   TestSort/should_return_same_value_when_array_has_only_one_element\n=== RUN   TestSort/should_return_the_lowest_element_followed_by_the_largest_element\n=== RUN   TestSort/should_return_an_array_with_the_same_length_as_the_one_provided_as_an_input\n=== RUN   TestSort/should_sort_all_the_elements_from_the_lowest_to_the_largest\n--- PASS: TestSort (0.00s)\n    --- PASS: TestSort/should_return_same_value_when_array_is_empty (0.00s)\n    --- PASS: TestSort/should_return_same_value_when_array_has_only_one_element (0.00s)\n    --- PASS: TestSort/should_return_the_lowest_element_followed_by_the_largest_element (0.00s)\n    --- PASS: TestSort/should_return_an_array_with_the_same_length_as_the_one_provided_as_an_input (0.00s)\n    --- PASS: TestSort/should_sort_all_the_elements_from_the_lowest_to_the_largest (0.00s)\nPASS\nok      alabeduarte.com 0.920s</code></pre></div>\n<p>If you are interested to see the entire code we’ve built, please uncollapse the\nsection below:</p>\n<details>\n<summary>(click to expand)</summary>\n<p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> sorting_test\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"math/rand\"</span>\n\t<span class=\"token string\">\"sort\"</span>\n\t<span class=\"token string\">\"testing\"</span>\n\n\t<span class=\"token string\">\"github.com/matryer/is\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Implementation:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Sort will receive a slice as an input and it will return another slice but</span>\n<span class=\"token comment\">// sorted.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>elements <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\n\tsort<span class=\"token punctuation\">.</span><span class=\"token function\">Ints</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> elements\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Unit tests:</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestSort</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return same value when array is empty\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tis <span class=\"token operator\">:=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\n\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return same value when array has only one element\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tis <span class=\"token operator\">:=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\n\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return the lowest element followed by the largest element\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tis <span class=\"token operator\">:=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\n\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should return an array with the same length as the one provided as an input\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tis <span class=\"token operator\">:=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\n\t\tsortedElements <span class=\"token operator\">:=</span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t\tactualLength <span class=\"token operator\">:=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>sortedElements<span class=\"token punctuation\">)</span>\n\n\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span>actualLength<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should sort all the elements from the lowest to the largest\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tis <span class=\"token operator\">:=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\n\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">Equal</span><span class=\"token punctuation\">(</span><span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Benchmarks:</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">generateRandomElements</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// initialise a slice with length and capacity of \"n\"</span>\n\telements <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// populate the slice with random elements</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">range</span> elements <span class=\"token punctuation\">{</span>\n\t\telements <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">,</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> elements\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">benchmarkBubbleSort</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\telements <span class=\"token operator\">:=</span> <span class=\"token function\">generateRandomElements</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\">// sort elements</span>\n\t\t<span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">benchmarkGoSort</span><span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\telements <span class=\"token operator\">:=</span> <span class=\"token function\">generateRandomElements</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\">// sort elements</span>\n\t\tsort<span class=\"token punctuation\">.</span><span class=\"token function\">Ints</span><span class=\"token punctuation\">(</span>elements<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkBubbleSort3</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkBubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkBubbleSort10</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkBubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkBubbleSort20</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkBubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkBubbleSort50</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkBubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkBubbleSort100</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkBubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkBubbleSort1000</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkBubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span>_000<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkBubbleSort100000</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkBubbleSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span>_000<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkGoSort3</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>      <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkGoSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkGoSort10</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkGoSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkGoSort20</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkGoSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkGoSort50</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>     <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkGoSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkGoSort100</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkGoSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkGoSort1000</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkGoSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span>_000<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkGoSort100000</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">benchmarkGoSort</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span>_000<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n</p>\n</details>\n<h2>Final thoughts</h2>\n<p>If you read the article and came this far, thank you very much. I hope I was\nable illustrate how would be like to develop a sorting algorithm driven by\ntests.</p>\n<p>You might have noticed that I wasn’t too concerned about picking up the most\nperforming algorithm implementation, to begin with, but rather, I was interested\nto go through the journey of having written <strong>code guided by tests</strong>. In other\nwords, <strong>my intention was to have tests that would justify the existence of any\nkind of implementation and avoid adding any extra code if there is no test for\nit</strong> and I hope I could make it clear and enjoyable.</p>\n<h3>Thank you for reading</h3>\n<p>I hope you enjoy this post, if you have any feedback or questions, hit me up on\n<a href=\"mailto:alabeduarte@gmail.com\">alabeduarte@gmail.com</a>, I’d be happy to hear your thoughts and be better next\ntime!</p>","frontmatter":{"title":"Test-Driven Algorithms - Sorting","date":"June 10, 2021","description":"In this article, I’d like to explore a couple of implementations of sorting algorithms. However, I’d like to do so driven by unit tests. The examples are written in Go but don't worry if you never worked with Go before. The emphasis here is on the journey and the joy of building solutions guided by tests!"}},"previous":{"fields":{"slug":"/the-semantics-of-marshalling-in-go/"},"frontmatter":{"title":"The semantics of Marshalling in Go"}},"next":null},"pageContext":{"id":"6b424d30-eba8-514d-80a4-7dc9ebf58f33","previousPostId":"dbdcebfb-e515-5163-95f8-6f263f2b156f","nextPostId":null}},"staticQueryHashes":["3347749741","3716405767"]}