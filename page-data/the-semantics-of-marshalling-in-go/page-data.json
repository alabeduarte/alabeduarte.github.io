{"componentChunkName":"component---src-templates-blog-post-js","path":"/the-semantics-of-marshalling-in-go/","result":{"data":{"site":{"siteMetadata":{"title":"Alabê's Blog"}},"markdownRemark":{"id":"dbdcebfb-e515-5163-95f8-6f263f2b156f","excerpt":"In this post, I’d like to discuss how Marshalling/Unmarshalling process is\nusually applied in Go programs. I’ll give some examples\nof how it is used in practice…","html":"<p>In this post, I’d like to discuss how Marshalling/Unmarshalling process is\nusually applied in <a href=\"https://golang.org/\">Go</a> programs. I’ll give some examples\nof how it is used in practice with some code examples (i.e. data parsing) and\nthen expand on other usages when we have the need for transforming data across\ndifferent domains.</p>\n<p>Before discussing the term\n<a href=\"https://en.wikipedia.org/wiki/Marshalling_(computer_science)\">Marshalling</a>, I’d\nlike to start with the word <em>data</em> in the context of programming languages. More\noften than not we programmers have a task that involves in some shape or form\ninteracting with data represented in a format and then we need to transform this\ndata into a different representation.</p>\n<p>A few use-cases that come to mind:</p>\n<hr>\n<blockquote>\n<p>Fetch data from this HTTP API and convert it into my own type to then do\nsomething…</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>As soon as this “data” arrives, transform them into something else, which is\nwhat our system understands…</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>In order to integrate with certain third-party API, I need to convert this\n“data” into something that the third-party API understands to then send the\ndata…</p>\n</blockquote>\n<h3>What should we call this?</h3>\n<p>When it comes to changing data’s representation into another representation in\nSoftware, I would imagine some of these terms would ring a bell:\n<em>Encode/Decode</em>, <em>Marshal/Unmarshal</em>, <em>Map</em>, <em>Normalise (also Normalize)</em>,\n<em>Parse</em>, <em>Reduce</em>, <em>Serialise (also Serialize)</em>, <em>Transform</em>, <em>etc.</em></p>\n<p>You might notice that different programming languages use one more than another\nand, in Go, the terms <code class=\"language-text\">Marshal</code> and <code class=\"language-text\">Unmarshal</code> are usually preferred. In this\npost, I’d like to explore or try to guess why this is the case and what all of\nthese terms have in common.</p>\n<h2>The term Marshalling</h2>\n<p>In the context of computer science and programming languages, the term\n<em>marshalling</em> is the process of transforming a data representation into a\nsuitable format that will be used by a different Software Component.</p>\n<p>This process is quite interesting because it enables interoperability between\ndifferent Softwares. Consider <em>Software X</em> and <em>Software Y</em>, they are totally\nindependent of one another. However, they can communicate with each other via\nmessage passing and they can exchange data, as long as they establish a common\ncontract or <a href=\"https://en.wikipedia.org/wiki/Interface_(computing)\">interface</a>.</p>\n<p>i.e.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Software X –&gt; Marshal data &quot;abc&quot; into &quot;&lt;abc&gt;&quot;\nSoftware Y –&gt; Unmarshal data &quot;&lt;abc&gt;&quot; into &quot;A, B, C&quot;</code></pre></div>\n<h2>How Marshal/Unmarshal can be used in Go</h2>\n<p>In Go, one of the most famous examples you might find is converting data from a\nJSON structure into Go code (<em>in other words, JSON “parsing”</em>).</p>\n<blockquote>\n<p>What about the term Parsing?</p>\n</blockquote>\n<p>There is a quite popular term that can be seen as <em>similar</em>, but don’t assume\nthat just yet, which is <a href=\"https://en.wikipedia.org/wiki/Parsing\">parsing</a>. I\nwould say that the <strong>semantics of parsing</strong> is more applicable when the data to\nbe processed are <strong><em>strings/symbols</em></strong> that will then be transformed into a\ncustom representation throughout the programming language in question.</p>\n<p>While terms like Marshalling and Encoding offer a bit more scope to work with.\nGiven you need to transform <em>type A</em> to <em>type B</em> while <em>type A</em> is a <strong>binary</strong>,\nI personally think that calling a “parser” doesn’t feel right.</p>\n<h3>Back to Marshalling and Unmarshalling</h3>\n<p>It took a bit longer but the term “Marshalling” clicked\nfor me, eventually. When I first came to learn Go, call the method <code class=\"language-text\">Unmarshal</code> to “parse”\nJSON felt really weird and low level to be given the definition discussed so\nfar.</p>\n<p>However, Marshal/Unmarshal can and should be used as a generic way to transform\ntypes between boundaries regardless of the level of abstraction (i.e. network,\napplication, domain, platform).</p>\n<h3>Converting from one format to another</h3>\n<p>When dealing with <a href=\"https://en.wikipedia.org/wiki/Distributed_computing\">Distributed\nSystems</a>, converting\ndifferent representations from one domain to another can be quite common. And\nI’m not only referring to business domains (i.e. Shopping cart, Billing,\nInvoice) but also to different transport layers (i.e. Network, Protocols).</p>\n<h4>Data format transformations (i.e. JSON, XML, etc)</h4>\n<p>We can unmarshal from <em>type A</em> to <em>type B</em> when transporting data over\nthe wire or when converting from a generic data representation to a\ndomain-specific representation.</p>\n<p>So let’s imagine we are building a system that manages user’s accounts and we\nhave the following use-cases to cover:</p>\n<ul>\n<li>Convert from <a href=\"https://www.w3schools.com/xml/xml_whatis.asp\">XML</a></li>\n<li>Convert from <a href=\"https://www.json.org/json-en.html\">JSON</a></li>\n<li>Convert from <a href=\"https://developers.google.com/protocol-buffers\">Protocol Buffers</a></li>\n<li>etc.</li>\n</ul>\n<p><img src=\"/1f37e8bda1d594b050535961a1de6a60/marshal-unmarshal-data-format.svg\" aria-label=\"Here we have a\ndiagram with 3 marshallers: XML, JSON and protobuf. Each of them marshals data\ninto its respective format. Then, we have Account with the Unmarshal method\nwhich will take a single argument as input and based on the format, it will\nfigure out how to Unmarshal to an Account\" width=\"100%\"></p>\n<p><i>If the image is too small, please click <a\nhref=\"/1f37e8bda1d594b050535961a1de6a60/marshal-unmarshal-data-format.svg\" target=\"_blank\">here</a> to see it\nbigger in a different tab</i></p>\n<h3>Code examples</h3>\n<details>\n<summary>Unit tests (click to expand)</summary>\n<p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Test_Unmarshal</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ttests <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\t\tname <span class=\"token builtin\">string</span>\n\t\tin   <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\tout  Account\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"should unmarshal Account from XML\"</span><span class=\"token punctuation\">,</span>\n\t\t\tin<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">`\n\t\t\t&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t\t\t&lt;User>\n\t\t\t\t&lt;Name>Mary&lt;/Name>\n\t\t\t\t&lt;Type>Gold&lt;/Type>\n\t\t\t&lt;/User>\n\t\t\t`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tout<span class=\"token punctuation\">:</span> Account<span class=\"token punctuation\">{</span>\n\t\t\t\tName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Mary\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"should unmarshal Account from JSON\"</span><span class=\"token punctuation\">,</span>\n\t\t\tin<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">`\n\t\t\t{\n\t\t\t\t\"user\": {\n\t\t\t\t\t\"name\": \"John\",\n\t\t\t\t\t\"type\": \"Premium\",\n\t\t\t\t\t\"created_at\": \"2020-01-01\"\n\t\t\t\t}\n\t\t\t}\n\t\t\t`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tout<span class=\"token punctuation\">:</span> Account<span class=\"token punctuation\">{</span>\n\t\t\t\tName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"should unmarshal Account from protobuf\"</span><span class=\"token punctuation\">,</span>\n\t\t\tin<span class=\"token punctuation\">:</span> ProtobufAccount<span class=\"token punctuation\">{</span>\n\t\t\t\tAccountName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\tout<span class=\"token punctuation\">:</span> Account<span class=\"token punctuation\">{</span>\n\t\t\t\tName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\tname<span class=\"token punctuation\">:</span> <span class=\"token string\">\"should not unmarshal from CSV format since it doesn't support yet\"</span><span class=\"token punctuation\">,</span>\n\t\t\tin<span class=\"token punctuation\">:</span>   <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token function\">byte</span><span class=\"token punctuation\">(</span><span class=\"token string\">`Name,Mary`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tout<span class=\"token punctuation\">:</span>  Account<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n\t\t<span class=\"token comment\">// ...</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> tt <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> tests <span class=\"token punctuation\">{</span>\n\t\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>tt<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">var</span> a Account\n\t\t\terr <span class=\"token operator\">:=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>tt<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\texpectedError <span class=\"token operator\">:=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unable to unmarshal %v, format not supported.\"</span><span class=\"token punctuation\">,</span> tt<span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span>\n\n\t\t\t\t<span class=\"token keyword\">if</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> expectedError<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unexpected error while trying to unmarshal account: %v\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span> tt<span class=\"token punctuation\">.</span>out <span class=\"token operator\">!=</span> a <span class=\"token punctuation\">{</span>\n\t\t\t\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test failed. wanted: %v, got: %v\"</span><span class=\"token punctuation\">,</span> tt<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</p>\n</details>\n<p></p>\n<details>\n<summary>Implementation (click to expand)</summary>\n<p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// xmlPayload represents the XML payload with user data</span>\n<span class=\"token keyword\">type</span> xmlPayload <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tName <span class=\"token builtin\">string</span> <span class=\"token string\">`xml:User>Name`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// jsonPayload represents the JSON payload wiht user data</span>\n<span class=\"token keyword\">type</span> jsonPayload <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tUser <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\t\tName <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"name\"`</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token string\">`json:\"user\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ProtobufAccount represents a generated Go code from a protobuf definition</span>\n<span class=\"token comment\">// More details: https://developers.google.com/protocol-buffers/docs/reference/go-generated</span>\n<span class=\"token keyword\">type</span> ProtobufAccount <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tAccountName <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Account is the domain representation of an account in the system. It is the</span>\n<span class=\"token comment\">// main entity for the example we're using.</span>\n<span class=\"token keyword\">type</span> Account <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tName <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>Account<span class=\"token punctuation\">)</span> <span class=\"token function\">unmarshalXML</span><span class=\"token punctuation\">(</span>src <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> res xmlPayload\n\terr <span class=\"token operator\">:=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>res<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> Account<span class=\"token punctuation\">{</span>\n\t\tName<span class=\"token punctuation\">:</span> res<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>Account<span class=\"token punctuation\">)</span> <span class=\"token function\">unmarshalJSON</span><span class=\"token punctuation\">(</span>src <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> res jsonPayload\n\terr <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>res<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> Account<span class=\"token punctuation\">{</span>\n\t\tName<span class=\"token punctuation\">:</span> res<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>Account<span class=\"token punctuation\">)</span> <span class=\"token function\">unmarshalProtobuf</span><span class=\"token punctuation\">(</span>src ProtobufAccount<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">*</span>a <span class=\"token operator\">=</span> Account<span class=\"token punctuation\">{</span>\n\t\tName<span class=\"token punctuation\">:</span> src<span class=\"token punctuation\">.</span>AccountName<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Unmarshal takes an interface{} and try to convert into Account type</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>Account<span class=\"token punctuation\">)</span> <span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>src <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span> src<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">:</span>\n\t\tb <span class=\"token operator\">:=</span> src<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token comment\">// naive logic to determine if it is XML</span>\n\t\t<span class=\"token keyword\">if</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;?xml\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">unmarshalXML</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// naive logic to determine if it is JSON</span>\n\t\t<span class=\"token keyword\">if</span> strings<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">`\"user\":`</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">unmarshalJSON</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">case</span> ProtobufAccount<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">unmarshalProtobuf</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>ProtobufAccount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unable to unmarshal %v, format not supported.\"</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</p>\n</details>\n<p>I’d like to explore <strong>beyond JSON parsing</strong> since there are tons of articles\nabout <a href=\"https://gobyexample.com/json\">parsing JSON data in go</a> in the internet.</p>\n<h3>Converting from one domain to another</h3>\n<p>In this particular case, let’s imagine we have an e-commerce system that goes\nfrom adding item to a cart, placing an order and sending an invoice to the\ncustomer.</p>\n<p>Once the customer selects an item and adds it to her/his cart, the item will be\npart of an order that will also be listed in the invoice afterwards. However,\nthe “item” might not have the same meaning across the system.</p>\n<p><em>I would suggest a read on <a href=\"https://martinfowler.com/bliki/BoundedContext.html\">Bounded\nContext</a> for more details.\nIt is described in more depth in the book\n<a href=\"https://www.amazon.com/gp/product/0321125215?ie=UTF8&#x26;tag=martinfowlerc-20&#x26;linkCode=as2&#x26;camp=1789&#x26;creative=9325&#x26;creativeASIN=0321125215\">Domain-Driven-Design</a></em></p>\n<p>Without further ado, let’s check how <code class=\"language-text\">Marshal</code> and <code class=\"language-text\">Unmarshal</code> can be used to\ntranslate different data representations across different domains:</p>\n<p><img src=\"/00ef3c2ecfb4063dcdeb3887c4a9e4c1/marshal-unmarshal-domains.svg\" aria-label=\"Here we have three\ncircles, which one representing a Software COmponent. On each circle, we have\nboxes that represent actions, events and entities. Every component communicates\nwith each other via events and the data is translated between circles throughout\nMarshalling and Unmarshalling\" width=\"100%\"></p>\n<p><i>If the image is too small, please click <a\nhref=\"/00ef3c2ecfb4063dcdeb3887c4a9e4c1/marshal-unmarshal-domains.svg\" target=\"_blank\">here</a> to see it\nbigger in a different tab</i></p>\n<p>Because now the components are now communicating via a common interface\n(<code class=\"language-text\">Marshal</code>/<code class=\"language-text\">Unmarshal</code>), the data format that is used to transfer between\ncomponents became merely an implementation detail. It no longer matters if an item,\nwhen unmarshalled to an Order, will be a JSON payload, protobuf or a just data\ntransformation between <a href=\"https://golang.org/pkg/go/types/\">go types</a>. As the\nsystem supports different ways of data transformation (new domains being\nintroduced, new formats, new integrations), the core flow doesn’t need to\nchange, because now <code class=\"language-text\">Marshal</code> and <code class=\"language-text\">Unmarshal</code> abstracts that away.</p>\n<h2>Final thoughts</h2>\n<p>Although the <em>Marshalling</em> terminology might sound too low level (i.e. feels\nmore about computation, less about business domain), it is a <strong>consistent way</strong>\nto transform data from one format to another, where this transformation can be\nfrom low-level bytes into an “object” or it can be used to translate from one\ndomain representation to another.</p>\n<p>One might argue that having a single interface to transform data between domains\nis nothing novel. However, having this <strong>semantics</strong> established is quite useful\nso developers won’t need to come up with new conventions all over again.\nAlthough I appreciate always having new ways to express real-life problems in\nform of code, I believe that data transformation, most of the time, are stepping\nstones for problem-solving, not the end goal. So if there is a standard way\nto deal with this mundane task, I found it very welcome.</p>\n<p>But hey, this is only my opinion at the time of this post! If you read this far,\nI hope I didn’t waste your time!</p>\n<h3>Thank you for reading</h3>\n<p>I hope you enjoy this post, if you have any feedback or questions, hit me up on\n<a href=\"mailto:alabeduarte@gmail.com\">alabeduarte@gmail.com</a>, I’d be happy to hear your thoughts and be better next\ntime!</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Marshalling_(computer_science)\">Marshalling (computer science)</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Interface_(computing)\">Interface (computing)</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Parsing\">Parsing</a></li>\n<li><a href=\"https://gobyexample.com/json\">Go By Example: JSON</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Distributed_computing\">Distributed Systems</a></li>\n<li><a href=\"https://www.w3schools.com/xml/xml_whatis.asp\">XML</a></li>\n<li><a href=\"https://www.json.org/json-en.html\">JSON</a></li>\n<li><a href=\"https://developers.google.com/protocol-buffers\">Protocol Buffers</a></li>\n<li><a href=\"https://martinfowler.com/bliki/BoundedContext.html\">Bounded Context</a></li>\n<li><a href=\"https://www.amazon.com/gp/product/0321125215?ie=UTF8&#x26;tag=martinfowlerc-20&#x26;linkCode=as2&#x26;camp=1789&#x26;creative=9325&#x26;creativeASIN=0321125215\">Domain-Driven Design</a></li>\n</ul>","frontmatter":{"title":"The semantics of Marshalling in Go","date":"March 26, 2021","description":" In this post, I'd like to discuss how Marshalling/Unmarshalling process is usually applied in Go programs. I'll give some examples of how it is used in practice with some code examples (i.e. data parsing) and then expand on other usages when we have the need for transforming data across different domains. "}},"previous":{"fields":{"slug":"/3-approaches-conditional-rendering-react/"},"frontmatter":{"title":"3 approaches to consider when rendering conditional content in React"}},"next":null},"pageContext":{"id":"dbdcebfb-e515-5163-95f8-6f263f2b156f","previousPostId":"7359eaf8-1caf-59ad-9b9e-a02549d40a95","nextPostId":null}},"staticQueryHashes":["3347749741","3716405767"]}