{"componentChunkName":"component---src-templates-blog-post-js","path":"/new-env-setup/","result":{"data":{"site":{"siteMetadata":{"title":"Alabê's Blog"}},"markdownRemark":{"id":"7b29009c-3283-5609-b4cf-05c579fc79e9","excerpt":"Dang! Got a new laptop and I have to set up everything… again… I always find it exciting when I get something new, such as a new laptop. When\nbuying one…","html":"<h2>Dang! Got a new laptop and I have to set up everything… again…</h2>\n<p>I always find it exciting when I get something new, such as a new laptop. When\nbuying one, changing jobs (assuming the employer provides me one) or replacing\nold by new.</p>\n<p>The first thing I like to do is to assess the machine’s power, see what is made\nin terms of memory and disk space. Then, I see how far I can get in terms of\nprivileges (i.e. can I install/uninstall whatever I want?).</p>\n<p>This is important to me because I like to keep things clean and tidy so\neventually, I can start making my own mess by installing my stuff. During my\nThe career I kind of got a mental list of software I lean on, things that I really\nneed, other things that I <em>might</em> need and others that I heard that are nice but\nI never really used it.</p>\n<p>As I became to customise my settings more and more, <em>having a new machine wasn’t\nthat exciting anymore</em>. I not only have to remember to install all of these\nthings that I need, but it became also tedious and demanded a large cognitive effort.\nAlso, I got frustrated many times because I thought I was all set up until I\nrealised I forgot to install a particular tool.</p>\n<h2>Consistent environment</h2>\n<p>The way I now approach this is to automate my setup as much as I can so that\nevery time I set up a new machine, my development environment will be consistent\neach time. In order to make this happen, I like to structure my environment\nsetup with the following categories:</p>\n<ul>\n<li>Tools</li>\n<li>Access</li>\n<li>Configuration</li>\n</ul>\n<hr>\n<h3>Tools</h3>\n<p>I like to go with an approach of running a single command and install everything\nI need at once. The operating system that I’ve been using is macOS but most of\nthe things that I’ll mention here also applies for Linux. In terms of Windows,\nprobably you will find an equivalent.  What is important here is to stick to the\nconcept of automation.</p>\n<p>What I use to install the tools that I rely on is <a href=\"https://brew.sh/\">Homebrew</a>\nand it is simple as that:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew install git</code></pre></div>\n<p><em>The command above installs <code class=\"language-text\">git</code>, as an example.</em></p>\n<p>You also can use <code class=\"language-text\">brew</code> to install macOS apps (i.e. browser, code editor, image\nvisualisation, etc) via <a href=\"https://formulae.brew.sh/cask/\">Homebrew Cask</a></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew install --cask firefox</code></pre></div>\n<p>When you install something via <code class=\"language-text\">brew</code> (a.k.a Homebrew), the software is now\nmanaged by it. Meaning that whenever you need to upgrade, reinstall or delete,\nyou can do via homebrew as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew upgrade git</code></pre></div>\n<p>The good thing about this is that you can now dump all your software list you\never installed via brew into one file and that can be used to set up a whole new\nmachine with a single command. You can achieve that with <a href=\"https://github.com/Homebrew/homebrew-bundle\">Homebrew\nBundle</a>.</p>\n<p><em>Please follow the <a href=\"https://github.com/Homebrew/homebrew-bundle\">official\ndocumentation</a> to install it\nproperly.</em></p>\n<p>Once you are all set, you can run the following command that will consolidate\nall the things you have installed into a file usually named <code class=\"language-text\">Brewfile</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew bundle dump --file=Brewfile</code></pre></div>\n<p>Then, the <code class=\"language-text\">Brewfile</code> will look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">tap &quot;github/gh&quot;\ntap &quot;homebrew/bundle&quot;\ntap &quot;homebrew/cask&quot;\ntap &quot;homebrew/cask-fonts&quot;\ntap &quot;homebrew/cask-versions&quot;\ntap &quot;homebrew/core&quot;\ntap &quot;homebrew/services&quot;\nbrew &quot;git&quot;\nbrew &quot;go&quot;\nbrew &quot;make&quot;\nbrew &quot;neovim&quot;\nbrew &quot;tmux&quot;\nbrew &quot;unzip&quot;\ncask &quot;buttercup&quot;\ncask &quot;docker&quot;\ncask &quot;firefox&quot;</code></pre></div>\n<p>Now, imagine you do that now, save this file somewhere (i.e. cloud). When you\nreceive a new machine or even format your current machine, you can run <code class=\"language-text\">brew\nbundle</code> to restore all the software that you used to have. See the command\nbelow:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ brew bundle --file=homebrew/Brewfile</code></pre></div>\n<p>The above will install everything as if you were running <code class=\"language-text\">brew install git</code>,\n<code class=\"language-text\">brew install go</code>, etc.</p>\n<h3>Access</h3>\n<p>Now you have your stuff in place, there will be a “necessary” pain of\nauthenticating with most of them (i.e. your cloud storage, your music app). The\nway I like to approach this is to get handy a password manager.</p>\n<p><em>PS: I usually use brew cask to install mine so I don’t have to install it\nmanually ever again</em></p>\n<p>In case you don’t have a password manager, I’d consider downloading one now,\nhere’s\n<a href=\"https://www.troyhunt.com/password-managers-dont-have-to-be-perfect-they-just-have-to-be-better-than-not-having-one/\">why</a>.</p>\n<p>A few options to consider:</p>\n<ul>\n<li><a href=\"https://1password.com/\">1Password</a></li>\n<li><a href=\"https://buttercup.pw\">Buttercup</a></li>\n</ul>\n<h3>Configuration</h3>\n<p>This category is pretty much to make sure once you are all set up, your tools are\nthe way you left them before changing machines (or before you restored your\ncurrent machine). I personally don’t bother too much about browser config\nbecause I have personal accounts that bring my config from the browser’s cloud,\nbut editor configuration is something that is really close to my workflow and if\nI don’t see my editor or my terminal the way I remembered, I might have a\nHard time trying to remember where things were before becoming productive.</p>\n<p>About code editors, you might have seen around some GitHub repo called\n<code class=\"language-text\">dotfiles</code>. The reason for this name is because most of the configs are files that\nhave <code class=\"language-text\">.</code> in front of its name (i.e. <code class=\"language-text\">.gitconfig</code>, <code class=\"language-text\">.vim</code>, <code class=\"language-text\">.zshrc</code>, <code class=\"language-text\">.idea</code>,\netc).</p>\n<p>So what most people do, they create a git repository somewhere (i.e. GitHub,\nGitLab, Bitbucket, etc) and consolidate all configs into one place so whenever\nyou clone your repo (from a brand-new machine), you can run a couple of commands\nand have your original config in place.</p>\n<p>In addition, you can also add customisable scripts to speed up your initial\nsetting. As an example, VSCode is an editor that you can install a number of\nplugins to support your day-to-day development. So, although I’m not a heavy\nVSCode user, I use it sometimes and I have a few plugins that help during these\noccasions. So I came up with a script that will read all my current plugins and\nstore them into a file so whenever I set up a new environment, the script will\ninstall all of these plugins so that when I open VSCode, the <code class=\"language-text\">settings.json</code>\nwill contain all plugins that I used to have in my previous environment. That’s\nwas pretty much inspired by <a href=\"https://github.com/Homebrew/homebrew-bundle\">Homebrew Bundle</a></p>\n<p>Here’s a snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/bin/bash\n\n###\n# Creates symbolic link from this dir into where vscode is installed\n# then reads VSCodeExtensionsFile and install each extension one by one\n###\nbundle()\n{\n  # Creates symbolic link\n  rm -rf ~/Library/Application\\ Support/Code/User/settings.json || true\n  ln -s `pwd`/vscode/settings.json ~/Library/Application\\ Support/Code/User/settings.json\n\n  # Install extensions\n  while read extension; do\n    code --install-extension $extension\n  done &lt; vscode/VSCodeExtensionsFile\n\n  echo &quot;Done.&quot;\n}\n\n###\n# List vscode extensions and place into VSCodeExtensionsFile file\n###\ndump()\n{\n  extensions=&quot;vscode/VSCodeExtensionsFile&quot;\n  echo &quot;Reading existing extensions from VSCode onto $extensions&quot;\n  echo &quot;&quot;\n\n  code --list-extensions | tee $extensions\n\n  echo &quot;Done.&quot;\n}\n\n$*</code></pre></div>\n<hr>\n<h2>Conclusion</h2>\n<p>If you read until now, thank you very much, I hope this article help you somehow\nor help someone you know!</p>\n<p>I’ll share below my personal <code class=\"language-text\">dotfiles</code> where I apply most of the things I’ve\ndiscussed and feel free to copy &#x26; paste and make your own config according to\nwhat makes sense to you.</p>\n<p><a href=\"https://github.com/alabeduarte/dotfiles\">https://github.com/alabeduarte/dotfiles</a></p>\n<p>If you have any questions or feedback, feel free to email me on\n<a href=\"mailto:alabeduarte@gmail.com\">alabeduarte@gmail.com</a>.</p>\n<p>A few shout outs to friends that helped me and inspired me to do this post:</p>\n<ul>\n<li><a href=\"https://github.com/celsodantas\">Celso Dantas</a></li>\n<li><a href=\"https://github.com/fernando-alves\">Fernando Alves</a></li>\n<li><a href=\"https://about.me/gtramontina\">Guilherme Tramontina</a></li>\n<li><a href=\"https://marcovaltas.com/about.html\">Marco Valtas</a></li>\n<li><a href=\"https://github.com/narcisobenigno\">Narciso Benigno</a></li>\n</ul>","frontmatter":{"title":"Setting up a new machine","date":"January 08, 2021","description":"As I became to customise my settings more and more, having to set up a new environment wasn't an exciting thing to do anymore.  I not only have to remember to install all of these things that I need, but it became also tedious and demanded a large cognitive effort.  Also, I got frustrated many times because I thought I was all set up until I realised I forgot to install a particular tool. This post shares some things I've learned when comes to automating my environment setup."}},"previous":{"fields":{"slug":"/tdd/"},"frontmatter":{"title":"TDD (Test-Driven Development) - My personal journey"}},"next":null},"pageContext":{"id":"7b29009c-3283-5609-b4cf-05c579fc79e9","previousPostId":"fa612ea4-3508-52fe-8587-9fcee6e6a3cc","nextPostId":null}},"staticQueryHashes":["3347749741","3716405767"]}