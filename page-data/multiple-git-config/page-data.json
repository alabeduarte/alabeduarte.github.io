{"componentChunkName":"component---src-templates-blog-post-js","path":"/multiple-git-config/","result":{"data":{"site":{"siteMetadata":{"title":"Alabê's Blog"}},"markdownRemark":{"id":"b4c300b4-32d8-53ff-a00f-d244e54d15e6","excerpt":"What  is for? When you set up a new code and uses Git to manage your\nversion control, unless you are only reading a code of a repository that you\ncloned, you…","html":"<h2>What <code class=\"language-text\">.gitconfig</code> is for?</h2>\n<p>When you set up a new code and uses <a href=\"https://git-scm.com/\">Git</a> to manage your\nversion control, unless you are only reading a code of a repository that you\n<a href=\"https://git-scm.com/docs/git-clone\">cloned</a>, you will have to add some\nconfiguration to start interacting with Git, which is mainly to tell Git “who\nyou are” since Git’s configurations are per-user.</p>\n<p>For this post, let’s use the infamous <a href=\"https://en.wikipedia.org/wiki/John_Doe\">John\nDoe</a> as an example. I believe would be\neasier if we do some role play/story tell this because we will be discussing\nemails, directory names, company names and I’d like to avoid any situation where\ncould lead you – the reader – to trouble (i.e. wrong filename, etc).</p>\n<p>Say John Doe wants to set up Git and have more than one email (personal and work)\nand John Doe wants to make sure that the commits are being referenced properly\nso that other people might reach out to him directly in case of questions with\nchanges and all. The challenge is that <strong>the company that John Doe works for\nrequires every employee to use their work-email</strong> so John Doe needs to pay\nattention to his commits.</p>\n<h3>Getting started</h3>\n<p>For a complete guide on how to setup Git, I’d recommend the <a href=\"https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup\">official\nguide</a>, but\nto summarise, running the following commands will get you ready to go:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com</code></pre></div>\n<p>The command above tells Git about your <strong>identity</strong> which is represented by your\n<strong>name</strong> and your <strong>email</strong>. This is important because every Git commit uses\nthis information.</p>\n<p>The <code class=\"language-text\">--global</code> flag means that these configurations will be stored in your\nsystem which will be placed in a file located at <code class=\"language-text\">~/.gitconfig</code>.</p>\n<p><em>NOTE: without the flag <code class=\"language-text\">--global</code>, the configuration provided will only be\napplied to the current directory.</em></p>\n<h3>Checking Your Settings</h3>\n<p>You can check your current Git settings by typing <code class=\"language-text\">git config</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ git config --list\nuser.name=John Doe\nuser.email=johndoe@example.com</code></pre></div>\n<p>You also can verify the <code class=\"language-text\">~/.gitconfig</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cat ~/.gitconfig\n\n[user]\n  name = John Doe\n  email = johndoe@example.com</code></pre></div>\n<h2>Dealing with multiple configurations</h2>\n<p>Git’s API is big so I might not cover all options here, meaning there might be\nother ways to achieve the same thing wich is: <strong>be able to commit code using\nappropriate identifications</strong> without the hassle of manually change/check them.</p>\n<p>The approach I’d like to share is to use\n<a href=\"https://git-scm.com/docs/git-config#_includes\">includeIf</a>.  What <code class=\"language-text\">includeIf</code>\ndoes is to <strong>append</strong> a new peace of config from a different path\n<strong>conditionally</strong> so that way, if the conditions are met, an addition to the\nexisting Git config will be considered when interacting with Git. This is based\non which directory you’re on so in order to make the most use of <code class=\"language-text\">includeIf</code> it\nis recommended to keep all repositories within a single folder.  For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- my-workspace/\n  - xyz/\n    - repository-1/\n    - repository-2/\n    (...)</code></pre></div>\n<p>Considering John Doe works at the company <em>xyz</em> and his email is\n<em><a href=\"mailto:j.doe@xyz.com\">j.doe@xyz.com</a></em>, let’s create a <strong>new file</strong> containing the additional info that\nshould only be used for work-related repositories:</p>\n<h4>1. Create a new file:</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ touch ~/my-workspace/xyz/.gitconfig-work</code></pre></div>\n<h4>2. Add the work-related info to the newly created file:</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[user]\n  name = John Doe\n  email = j.doe@xyz.com</code></pre></div>\n<h4>3. Add conditional config to the global Git config</h4>\n<p>Now we need to tell Git that, if John Doe is within the work-specific directory\n(<code class=\"language-text\">~/my-workspace/xyz/</code> on this case), Git should use a different configuration\ninstead.</p>\n<p>To make that happen, let’s change the <strong>system Git config file</strong> located on\n<code class=\"language-text\">~/.gitconfig</code> and edit it with the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[user]\n  name = John Doe\n  email = johndoe@example.com\n[includeIf \"gitdir:~/my-workspace/xyz/\"]\n  path = ~/my-workspace/xyz/.gitconfig-work</code></pre></div>\n<h2>Dealing with different signature keys</h2>\n<p>Git is cryptographically secure and John Doe does not mess around, he wants to\nmake sure that every commit is from a trusted source. Git provides a mechanism\nwhere you can <a href=\"https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work\">sign your\ncommits</a> but now\nthat John Doe has different Git configurations, we need to find a way to also\nsetup different signatures depending on the identification (i.e. one signature\nfor his personal email, another signature for his work’s email).</p>\n<p>If you’re curious to know how to set up a GPG key with git, please read the\n<a href=\"https://git-scm.com/book/en/v2/Git-Tools-Signing-Your-Work\">official Git Tools\ndocumentation</a>.\nAdditionally, I’d recommend the following <a href=\"https://docs.github.com/en/github/authenticating-to-github/telling-git-about-your-signing-key\">this\ntutorial</a>\npublished by GitHub.</p>\n<p>Similarly to the steps, we followed to set up different configs based on the\ndirectory, let’s start:</p>\n<h4>1. Create a new file with “personal” config:</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ touch ~/my-workspace/side-projects/.gitconfig-personal</code></pre></div>\n<h4>2. Add the signature (i.e. in our case, the signature is <em>SECRET</em>) to the newly created file:</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[user]\n  signingkey = SECRET</code></pre></div>\n<h4>3. Add your work-related signature (i.e. <em>SECRETWORK</em> on this case) to your the work-related Git config</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[user]\n  name = John Doe\n  email = j.doe@xyz.com\n  signingkey = SECRETWORK</code></pre></div>\n<h4>4. Now let’s configure our global <code class=\"language-text\">~/.gitconfig</code> with the following:</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[includeIf \"gitdir:~/my-workspace/xyz/\"]\n  path = ~/my-workspace/.gitconfig-work\"\n[includeIf \"gitdir:~/my-workspace/side-projects/\"]\n  path = ~/my-workspace/side-projects/.gitconfig-personal</code></pre></div>\n<h4>5. All set!</h4>\n<p>Now, John Doe can commit freely between personal/work-related with ease!</p>\n<h2>Thank you for reading</h2>\n<p>I hope you enjoy this post, if you have any feedback or questions, hit me up on\n<a href=\"mailto:alabeduarte@gmail.com\">alabeduarte@gmail.com</a>, I’d be happy to hear your thoughts and be better next\ntime!</p>","frontmatter":{"title":"Multiple .gitconfig files","date":"January 20, 2021","description":"Quick write-up about handling multiple .gitconfig files (personal and work-related configs)"}},"previous":{"fields":{"slug":"/new-env-setup/"},"frontmatter":{"title":"Setting up a new machine"}},"next":{"fields":{"slug":"/3-approaches-conditional-rendering-react/"},"frontmatter":{"title":"3 approaches to consider when rendering conditional content in React"}}},"pageContext":{"id":"b4c300b4-32d8-53ff-a00f-d244e54d15e6","previousPostId":"7b29009c-3283-5609-b4cf-05c579fc79e9","nextPostId":"7359eaf8-1caf-59ad-9b9e-a02549d40a95"}},"staticQueryHashes":["2355076697","3347749741"],"slicesMap":{}}